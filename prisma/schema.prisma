// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  // Use environment variable to determine provider
  // For local development: SQLite
  // For production: PostgreSQL
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  hashedPassword  String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  clients         Client[]
  invoices        Invoice[]
  emailTemplates  EmailTemplate[]
  automations     Automation[]
}

model Client {
  id           String    @id @default(uuid())
  name         String
  email        String
  phone        String?
  address      String?
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  invoices     Invoice[]

  @@index([userId])
}

model Invoice {
  id               String        @id @default(uuid())
  invoiceNumber    String        @unique
  clientId         String
  client           Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status           InvoiceStatus @default(DRAFT)
  issueDate        DateTime      @default(now())
  dueDate          DateTime
  items            InvoiceItem[]
  subtotal         Float
  tax              Float         @default(0)
  total            Float
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([userId])
  @@index([clientId])
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([invoiceId])
}

model EmailTemplate {
  id          String        @id @default(uuid())
  name        String
  subject     String
  body        String
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  automations Automation[]

  @@index([userId])
}

model Automation {
  id              String         @id @default(uuid())
  name            String
  trigger         TriggerType
  triggerData     Json?
  emailTemplateId String?
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])
  active          Boolean        @default(true)
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
  @@index([emailTemplateId])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum TriggerType {
  INVOICE_CREATED
  INVOICE_SENT
  INVOICE_OVERDUE
  INVOICE_PAID
  SCHEDULED
}
